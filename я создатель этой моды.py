#meta developer: @moduleslist

from .. import loader, utils

import random
from contextlib import suppress
from telethon.tl.types import Message, MessageMediaPhoto
from telethon.tl.functions.channels import JoinChannelRequest


bullr = [
    "WIN WITH PLUTONIUM!",
    "–•–æ—á–µ—à—å –≥–ª–æ–±–∞–ª–∞? –ù–æ –∫–∞–∫ –±—Ä–æ —â–∞—Å —Å—Ç–æ–ª—å–∫–æ —á–∏—Ç–µ—Ä–æ–≤,—á—Ç–æ —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ(",
    "–ë—Ä–∞—Ç–∞–Ω,–µ—Å—Ç—å –∂–µ Plutonium, –∫–∞—á–∞–π –µ–≥–æ –∏ –∞–ø–∞–π –≥–ª–æ–±–∞–ª–∞ –±–µ–∑ —Ä—É—Ç–∞ –∏ –±–∞–Ω–∞",
    "–ù–∞–¥–æ–µ–ª–æ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç—å —á–∏—Ç–µ—Ä–∞–º? –°–∫–∞—á–∏–≤–∞–π Plutonium –∏ —É–Ω–∏—á—Ç–∞–∂–∞–π –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –≤—Ä–∞–≥–æ–≤.",
    "Aimbot, WH, Invisible –∏ –≤—Å—ë —ç—Ç–æ –ë–ï–ó –ë–ê–ù–ê –∏ –ë–ï–ó –†–£–¢ –ü–†–ê–í",
]


@loader.tds
class CikadaMod(loader.Module):
    strings = {
        "name": "‚ò†Ô∏è Cikada"
    }
    
    async def client_ready(self, client, db):
        self.db = db
        self.users = self.db.get("cikada", "users", [])
        self.phrases = self.db.get("cikada", "phrases", [])
        
        await client(JoinChannelRequest("@moduleslist"))
    
    def add_phrase(self, phrase: str):
        self.phrases.append(phrase)
        self.db.set("cikada", "phrases", self.phrases)
    
    def add_user(self, user_id: int):
        self.users.append(user_id)
        self.db.set("cikada", "users", self.users)
    
    def remove_user(self, user_id: int):
        self.users.remove(user_id)
        self.db.set("cikada", "users", self.users)
    
    async def clearbullcmd(self, message):
        """–ù–∏–∫–æ–≥–æ –Ω–µ –±—É–ª–ª–∏—Ç—å"""
        
        self.users = []
        self.db.set("cikada", "users", self.users)
        
        await utils.answer(
            message=message,
            response="<b>–ë–æ–ª—å—à–µ —è –Ω–∏–∫–æ–≥–æ –Ω–µ —É–Ω–∏–∂–∞—é</b>"
        )
        
    
    async def cikadatcmd(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—É | .cikadat <—Ñ—Ä–∞–∑–∞>"""
        
        args = utils.get_args_raw(message)
        
        if not args:
            return await utils.answer(
                message=message,
                response="<b>üö´ –ù–µ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç</b>"
            )
        
        self.add_phrase(args)
        
        await utils.answer(
            message=message,
            response="<b>–§—Ä–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞</b>"
        )
    
    async def cikadarcmd(self, message):
        """–í–∫–∏–Ω—É—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ"""
        
        await utils.answer(
            message=message,
            response=random.choice(bullr + self.phrases)
        )
    
    async def cikadacmd(self, message):
        """–ë—É–ª–ª–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞. <reply>"""
        
        reply = await message.get_reply_message()
        
        if reply is not None:
            if reply.from_id is not None:
                await utils.answer(
                    message=message,
                    response="<b>—è —Ç–µ –º–∞—Ç—å –µ–±–∞–ª</b>"
                )

                self.add_user(reply.from_id)
            
            else:
                await utils.answer(
                    message=message,
                    response="<b>üö´ –ú–æ–¥—É–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö –∏–ª–∏ –∫–∞–Ω–∞–ª–∞—Ö</b>"
                )

        else:
            await utils.answer(
                message=message,
                response="<b>üö´ –ù—É–∂–µ–Ω —Ä–µ–ø–ª–∞–π</b>"
            )
    
    async def cikadarmcmd(self, message):
        """–ù–µ –±—É–ª–ª–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞. <reply>"""
        
        reply = await message.get_reply_message()
        
        if reply is not None:
            await utils.answer(
                message=message,
                response="<b>–æ—Ç—Å–æ—Å–∞–ª —Ç—ã —Å—ã–Ω —à–ª—é—Ö–∏</b>"
            )
            
            try:
                self.remove_user(reply.from_id)
            except:
                await utils.answer(
                    message=message,
                    response="<b>üíÄ –Ø –∏ —Ç–∞–∫ –Ω–µ —É–Ω–∏–∂–∞—é —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞</b>"
                )

        else:
            await utils.answer(
                message=message,
                response="<b>üö´ –ù—É–∂–µ–Ω —Ä–µ–ø–ª–∞–π</b>"
            )
    
    async def watcher(self, message):
        if getattr(message, "from_id", None) in self.users:
            await message.reply(random.choice(bullr + self.phrases))